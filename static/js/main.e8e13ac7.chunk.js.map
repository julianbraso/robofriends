{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","style","height","src","fontSize","marginTop","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","overflow","overflowX","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","display","alignItems","justifyContent","color","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e8e13ac7.chunk.js","sourcesContent":["import React from 'react';\nimport '../containers/App.css';\n\nconst Card = ({name, email ,id}) => {\n    return(\n        <div className=\"card tc bg-light-green br3 pa3 ma2 grow shadow-5\">\n            <img alt=\"robots\" style={{height:'120px'}} src={`https://robohash.org/${id}?200x200`} />\n            <div>\n                <h2 style={{fontSize:'15px',marginTop:'auto'}}>{name}</h2>\n                <p style={{fontSize:'12px',marginTop:'auto'}}>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n    return(\n    <div className=\"tc cardlist\">\n        {\n            robots.map((user,i) =>{\n                return <Card key={robots[i].id} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\n            })\n        }\n    </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    return(\n        <div style={{height:'70px'}}>\n            <input className=\"pa3 ba b--green\" \n            type=\"search\" \n            placeholder=\"Search robots\"\n            onChange={searchChange}\n             />\n        </div>\n    );\n}\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return(\n        <div style={{overflow:'scroll', \n        height:'70vh', overflowX: 'hidden'}}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React,{Component} from 'react';\n\nclass ErrorBoundary extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info){\n        this.setState({hasError:true})\n    }\n\n    render(){\n        if(this.state.hasError){\n            return <h1>Ooooops. that is not good...</h1>\n        }\n        return this.props.children;\n    }\n\n}\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll'\nimport ErrorBoundary from '../components/ErrorBoundary.js'\nimport '../containers/App.css'\n//import {robots} from './robots';\n\nclass App extends Component {\n    constructor(){\n        super()\n        this.state={\n            robots: [],\n            searchfield: ''\n        }\n    }\n\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response=> response.json())\n        .then(users => this.setState({robots: users}));\n    }\n\n    onSearchChange = (event) => {\n        this.setState({searchfield: event.target.value});\n    }\n\n    render(){\n        const filteredRobots = this.state.robots.filter(robot =>{\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n        })\n        return (\n            <div className=\"tc\"> \n                <h1 className=\"f2\">RoboFriends</h1>\n                <SearchBox searchChange={this.onSearchChange}/>\n                <Scroll>\n                    <ErrorBoundary>\n                        <CardList robots={filteredRobots}/>\n                    </ErrorBoundary>\n                </Scroll>\n                <footer className=\"f6\" style={{height:'10vh',display: 'flex', \n                alignItems: 'flex-end',justifyContent: 'center',color:'white'}} \n                >Copyright ROBOFRIENDS 2020</footer>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import Card from './Card';\nimport App from './containers/App.js';\nimport './index.css';\n//import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n//import { robots } from './robots'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\nserviceWorker.register();\n\n"],"sourceRoot":""}